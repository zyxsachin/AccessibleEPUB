<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="changesContent" xml:space="preserve">
    <value>Changes will only be shown when the program is restarted</value>
  </data>
  <data name="changesTitle" xml:space="preserve">
    <value>Changes</value>
  </data>
  <data name="conversionContent" xml:space="preserve">
    <value>Problem converting from WYSIWYG to HTML</value>
  </data>
  <data name="conversionTitle" xml:space="preserve">
    <value>Conversion problem</value>
  </data>
  <data name="cssToJsContent" xml:space="preserve">
    <value>File is already in JavaScript format</value>
  </data>
  <data name="cssToJsTitle" xml:space="preserve">
    <value>Already JavaScript format</value>
  </data>
  <data name="emptyAltTextContent" xml:space="preserve">
    <value>The alternative text is empty.</value>
  </data>
  <data name="emptyAltTextTitle" xml:space="preserve">
    <value>Empty alternative text</value>
  </data>
  <data name="emptyTitleContent" xml:space="preserve">
    <value>The title is empty.</value>
  </data>
  <data name="emptyTitleTitle" xml:space="preserve">
    <value>Empty title</value>
  </data>
  <data name="formulaOverwriteContent" xml:space="preserve">
    <value>Formula with same title already exists in the document. Should the file be overwritten?</value>
  </data>
  <data name="formulaOverwriteTitle" xml:space="preserve">
    <value>Overwrite file</value>
  </data>
  <data name="imageOverwriteContent" xml:space="preserve">
    <value>Image with same name already exists in the document. Should the file be overwritten?</value>
  </data>
  <data name="imageOverwriteTitle" xml:space="preserve">
    <value>Overwrite file</value>
  </data>
  <data name="imagePathContent" xml:space="preserve">
    <value>Image doesn't exist.</value>
  </data>
  <data name="imagePathTitle" xml:space="preserve">
    <value>Image doesn't exist</value>
  </data>
  <data name="invalidFileContent" xml:space="preserve">
    <value>Accessible EPUB cannot open this file</value>
  </data>
  <data name="invalidFileTitle" xml:space="preserve">
    <value>Invalid file</value>
  </data>
  <data name="invalidFormulaContent" xml:space="preserve">
    <value>The entered formula is invalid.</value>
  </data>
  <data name="invalidFormulaTitle" xml:space="preserve">
    <value>Invalid formula</value>
  </data>
  <data name="invalidHeightContent" xml:space="preserve">
    <value>Invalid height entry.</value>
  </data>
  <data name="invalidHeightTitle" xml:space="preserve">
    <value>Invalid height</value>
  </data>
  <data name="invalidWidthContent" xml:space="preserve">
    <value>Invalid width entry.</value>
  </data>
  <data name="invalidWidthTitle" xml:space="preserve">
    <value>Invalid width</value>
  </data>
  <data name="jsToCssContent" xml:space="preserve">
    <value>File is already in CSS format</value>
  </data>
  <data name="jsToCssTitle" xml:space="preserve">
    <value>Already CSS format</value>
  </data>
  <data name="noFormulaContent" xml:space="preserve">
    <value>No input was entered.</value>
  </data>
  <data name="noFormulaTitle" xml:space="preserve">
    <value>Missing formula</value>
  </data>
  <data name="notAllFieldsContent" xml:space="preserve">
    <value>Not all required fields are filled out.</value>
  </data>
  <data name="notAllFieldsTitle" xml:space="preserve">
    <value>Empty fields</value>
  </data>
  <data name="notDeleteTempContent" xml:space="preserve">
    <value>Could not delete all files in temp folder.</value>
  </data>
  <data name="notDeleteTempTitle" xml:space="preserve">
    <value>Unable to delete files in temp folder</value>
  </data>
  <data name="notEpubContent" xml:space="preserve">
    <value>The file name is not an EPUB file</value>
  </data>
  <data name="notEpubTitle" xml:space="preserve">
    <value>Not an EPUB file</value>
  </data>
  <data name="parseInputContent" xml:space="preserve">
    <value>An error occurred while parsing the given input:</value>
  </data>
  <data name="parseInputTitle" xml:space="preserve">
    <value />
  </data>
  <data name="probReadContContent" xml:space="preserve">
    <value>Problem reading Content.xhtml</value>
  </data>
  <data name="probReadContTitle" xml:space="preserve">
    <value>Error reading Content.xhtml</value>
  </data>
  <data name="probReadNavContent" xml:space="preserve">
    <value>Problem reading nav.xhtml</value>
  </data>
  <data name="probReadNavTitle" xml:space="preserve">
    <value>Error reading nav.xhtml</value>
  </data>
  <data name="saveLeavingContent" xml:space="preserve">
    <value>Save the file before exiting?</value>
  </data>
  <data name="saveLeavingTitle" xml:space="preserve">
    <value>Save change</value>
  </data>
  <data name="tempInUseContent" xml:space="preserve">
    <value>Folder in use. Please leave and then press OK.</value>
  </data>
  <data name="tempInUseLongContent" xml:space="preserve">
    <value>Temp folder is still in use. After pressing OK, the file opening process will stop.</value>
  </data>
  <data name="tempInUseLongTitle" xml:space="preserve">
    <value>Folder still in use</value>
  </data>
  <data name="tempInUseTitle" xml:space="preserve">
    <value>Folder in use</value>
  </data>
  <data name="tocAccEpubContent" xml:space="preserve">
    <value>Table of Contents can only be generated if file was created in Accessible EPUB.</value>
  </data>
  <data name="tocAccEpubTitle" xml:space="preserve">
    <value>Table of contents error</value>
  </data>
  <data name="tocJsContent" xml:space="preserve">
    <value>Table of contents only supported in JavaScript Mode.</value>
  </data>
  <data name="tocJsTitle" xml:space="preserve">
    <value>Table of contents error</value>
  </data>
</root>